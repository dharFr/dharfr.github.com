<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery | dhar's blog]]></title>
  <link href="http://www.dhar.fr/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://www.dhar.fr/"/>
  <updated>2014-07-27T22:20:05+02:00</updated>
  <id>http://www.dhar.fr/</id>
  <author>
    <name><![CDATA[Olivier Audard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Queued ajax requests with jQuery and Coffescript]]></title>
    <link href="http://www.dhar.fr/blog/2012/03/31/queued-ajax-requests-with-jquery-and-coffescript/"/>
    <updated>2012-03-31T21:46:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2012/03/31/queued-ajax-requests-with-jquery-and-coffescript</id>
    <content type="html"><![CDATA[<p>I recently had to queue a few ajax requests. I wrote a little piece of Coffeescript+jQuery to provide a reusable way of doing it.
Using jQuery&rsquo;s <a href="http://api.jquery.com/category/deferred-object/">Deferred</a> objects and CoffeeScript makes the task really easy.</p>

<!--more-->


<p>You probably already know that all jQuery&rsquo;s ajax methods implement <a href="http://api.jquery.com/Types/#Promise">Promise</a> interface. That&rsquo;s why we can use the <code>pipe()</code> method to queue the queries, as well as <code>done()</code> and <code>fail()</code> methods to track the queries' progress.</p>

<p>Another interesting point is how CoffeeScript make the code clearer and easy to read. I particularly enjoyed using <a href="http://jashkenas.github.com/coffee-script/#splats">splats</a> (<code>...</code>) to write the <code>$.when(deferredObjs...)</code> part on line 34. Speaking about code readability, it&rsquo;s such an improvement compared to the <code>$.when.apply($, deferredObjs)</code> Javascript counterpart.</p>

<p>You can find a <a href="http://jsfiddle.net/wA6K8/1/">working sample</a> on jsFiddle.</p>

<p><div><script src='https://gist.github.com/2244946.js?file=jquery.queue.coffee'></script>
<noscript><pre><code>###*
 * jQuery queue plugin v0.1
 * ==========================
 *
 * Used to queue $.Deferred's Promise objects
 * author @_dhar
###

(($) -&gt;

  class $.Queueable

    constructor: (@builder, @args, @validator = -&gt; yes) -&gt;

    promise: -&gt; @builder(@args...).promise()
    expose:  -&gt; @args
    isValid: -&gt; @validator(@args...)

  $.queuedWhen = (queueables) -&gt;
    
    d = $.Deferred();

    prev = null
    deferredObjs = ((
      do (q) -&gt;
        if not q instanceof $.Queueable 
          d.reject &quot;#{q} is not a $.Queueable object&quot;, q
        else
          prev = if prev then prev.pipe -&gt; q.promise() else q.promise()
          prev.done -&gt; d.notify q.expose()
          prev.fail -&gt; d.reject q.expose()
    ) for q in queueables when q.isValid() )

    $.when(deferredObjs...).then -&gt; d.resolve()

    return d.promise()
)(jQuery)</code></pre></noscript></div>
</p>

<h3>References</h3>

<ul>
<li>jQuery&rsquo;s <a href="http://api.jquery.com/category/deferred-object/">Deferred</a> objects</li>
<li><a href="https://gist.github.com/2244946">Source code</a> on gist</li>
<li><a href="http://jsfiddle.net/wA6K8/">Working sample</a> on jsFiddle</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery plugin for ping-URL process]]></title>
    <link href="http://www.dhar.fr/blog/2011/07/26/jquery-plugin-for-ping-url-process/"/>
    <updated>2011-07-26T00:00:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2011/07/26/jquery-plugin-for-ping-url-process</id>
    <content type="html"><![CDATA[<p>If your page runs into an iframe hosted by another domain, you may want to keep the session open. The following jQuery plugin automates the &ldquo;ping URL&rdquo; process and provides some options.</p>

<!--more-->


<p>The pinger will ask the given URL every &lsquo;interval&rsquo; minutes if it detects
some activity by listening to the events listed in &lsquo;listen&rsquo; parameter.</p>

<p>Have a look to the &lsquo;defaults&rsquo; variable below for further details about available parameters and default values.</p>

<p><div><script src='https://gist.github.com/1107059.js'></script>
<noscript><pre><code>/**
 * $.pinger
 * 
 * If your page runs into an iframe hosted by another domain, you may want to keep the session open.
 * This plugin automates the &quot;ping URL&quot; process and provides some options.
 * 
 * The pinger will ask the given URL every 'interval' minutes if it detects
 * some activity by listening to the events listed in 'listen' parameter.
 * 
 * Have a look to the 'defaults' variable below for further details about available parameters and default values.
 * 
 * Example:
 * Ping Google Logo every 5 minutes and launch the first ping right now:
 * 	$.pinger({
 * 		interval: 5
 * 		url: &quot;http://www.google.co.uk/images/logos/ps_logo2.png&quot;,
 * 		pingNow: true
 * 	});
 * 
 * Initialize pinger without listening to events. Update activity on demand.
 * 	$.pinger({
 * 		url: &quot;http://www.google.co.uk/images/logos/ps_logo2.png&quot;,
 * 		listen: null
 * 	});
 * 	...
 * 	$.pinger.now('manual ping');
 */
(function($){

	var defaults = {
		interval: 10,					// pings the given URL every 'interval' MINUTES. Set to 0 for manual ping only
		url: null,						// the URL to ping
		listen: [&quot;click&quot;, &quot;keydown&quot;],	// events to listen for updating activity
		pingNow: false,					// If true, sends a ping request just after init
		beforeSend: null,				// Callback function, called before ping (should return true. false will cancels ping query)
		callback: false					// Callback function, called after ping query callback received
	};
	
	var options = {};
	var lastUpdate, checkInterval, iTime, pingImg, _pingerLogs = true;
	
	/* Public methods */
	var methods = {
		init: function( settings ) {
			options = $.extend(true, defaults, settings);

			if (!options.url) {
				$.error( 'jQuery.pinger: url parameter is mandatory');
				return;
			}
			
			log(&quot;$.pinger.init:&quot;, options);
			if ( options.interval &gt; 0 ) {
				
				lastUpdate = 0;
				iTime = (options.interval * 60 * 1000);
				
				checkInterval = setInterval( function(){

					log(&quot;$.pinger: Should I ping? (&quot;, ((new Date()).getTime() - lastUpdate), &quot;&gt;&quot;, iTime, &quot;?)&quot;);
					if ( ( (new Date()).getTime() - lastUpdate) &gt; iTime ) {
						stop('timeout');
					}
					else {
						ping('interval');
					}
				}, iTime);
				
				if (options.listen &amp;&amp; $.isArray(options.listen) &amp;&amp; options.listen.length &gt; 0) {

					$(document).bind(options.listen.join('.pinger '), function(event) {
						update(event.type);
					});	
				}
				
				if (options.pingNow) {
					ping('init');
				}
			}
		},
		/*
		 * $.pinger.now(param)
		 * Manual activity update
		 * param : some message to log
		 */
		now: function (param) {
			( options.interval &amp;&amp; options.interval &gt; 0 ) ? update(param) : ping(param);
		},
		/*
		 * $.pinger.destroy();
		 * destroy pinger
		 */
		destroy: function() {

			stop('destroy');
		}
	};

	/* Private Methods */
	function update(param) {
		log(&quot;$.pinger: activity update -&quot;,param);
		lastUpdate = (new Date()).getTime();
	}
	
	function ping(param) {
		log(&quot;$.pinger: Ping to&quot;, options.url, &quot;(&quot;, param, &quot;)&quot;);
		if (!options.beforeSend || options.beforeSend.apply(this, arguments)) {
			
			if (!pingImg) {
				// In FF or Chrome, we could use a GET xhr but IE blocks due to cross-domain policy
				// Image object looks fine for that ping job
				pingImg = new Image();
				pingImg.onload = function() {
					//Success callback
					log(&quot;$.pinger: Ping callback&quot;, arguments);
					if (options.callback) {
						options.callback.apply(this, arguments);
					}
				}
			}
			pingImg.src = options.url + &quot;?&quot; + (new Date().getTime());
		}
	}
	
	function stop(param) {
		log(&quot;$.pinger: Stopped -&quot;,param);
		if (options.listen &amp;&amp; $.isArray(options.listen) &amp;&amp; options.listen.length &gt; 0) {
			$(document).unbind(options.listen.join('.pinger '));
		}
		clearInterval(checkInterval);
	}
	
	function log() {
		if (_pingerLogs &amp;&amp; console &amp;&amp; console.log) {
			if (console.log.apply) {
				console.log.apply(console, arguments);
			}
			else {
				// console.log doesn't seem to be a &quot;real&quot; function in IE so apply can't be used 
				console.log((Array.prototype.slice.call(arguments)).join(&quot; &quot;));
			}
		}
	}

	/* Plugin entry point */
	$.pinger = function( method ) {
		// Method calling logic
		if ( methods[method] ) {
			return methods[ method ].apply( this, Array.prototype.slice.call(arguments, 1));
		} else if ( typeof method === 'object' || !method ) {
			return methods.init.apply(this, arguments );
		} else {
			$.error( 'Method ' + method + ' does not exist on jQuery.pinger');
			return this;
		}
	};
})(jQuery);</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery plugin pattern written in Coffeescript]]></title>
    <link href="http://www.dhar.fr/blog/2011/07/24/jquery-plugin-pattern-written-in-coffeescript/"/>
    <updated>2011-07-24T00:00:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2011/07/24/jquery-plugin-pattern-written-in-coffeescript</id>
    <content type="html"><![CDATA[<p>Once your <a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a> environment is up and running, you may want to write some awesome new jQuery plugin with CoffeeScript.</p>

<p>The code bellow is a starting point, it&rsquo;s clearly inspired from the <a href="http://docs.jquery.com/Plugins/Authoring">jQuery Doc</a>. Just search/replace <code>pluginName</code> with your plugin name and go ahead with your own code.</p>

<p><div><script src='https://gist.github.com/1101485.js'></script>
<noscript><pre><code>###*
 * jQuery pluginName plugin v0.1
 * ==========================
 * see http://docs.jquery.com/Plugins/Authoring
 *
 * plugin description goes here
 * author your.name@email.com
###

(($) -&gt;
	# Private functions 
	privateFunc = () -&gt;
		console.log &quot;private&quot;
	
	# Public Functions
	methods = 
		init: () -&gt;
			console.log 'init'
			@each -&gt;
				$this = $(@)
				data = $this.data 'pluginName'
				if not data
					### Do more stuff here ###
					$(@).data 'pluginName' 
						target: $this
				return
		
		destroy: () -&gt;
			@each -&gt;
				$this = $(@)
				data = $this.data 'pluginName'
				
				data.pluginName.remove()
				$this.removeData 'pluginName'
				return

	$.fn.pluginName = (method) -&gt;
		
		# Method calling logic
		if methods[method]
			methods[method].apply this, Array.prototype.slice.call arguments, 1 
		else if typeof method is 'object' or !method 
			methods.init.apply this, arguments
		else
			$.error &quot;jQuery.pluginName: Method #{ method } does not exist on jQuery.pluginName&quot;
	return
)(jQuery)
</code></pre></noscript></div>
</p>

<p>Links Summary:</p>

<ul>
<li><a href="https://gist.github.com/1101485#file_jquery.plugin_name.coffee">jquery.plugin_name.coffee</a> source code</li>
<li><a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a></li>
<li><a href="http://docs.jquery.com/Plugins/Authoring">jQuery Doc</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plugin jQuery - Aide contextuelle Javascript]]></title>
    <link href="http://www.dhar.fr/blog/2010/09/05/plugin-jquery-aide-contextuelle-javascript/"/>
    <updated>2010-09-05T00:00:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2010/09/05/plugin-jquery-aide-contextuelle-javascript</id>
    <content type="html"><![CDATA[<p>Voilà déjà pas mal de temps que je n'ai rien publié ici&hellip; Ce qui ne veux pas dire que j'ai rien dans les cartons. C'est plutôt le temps qui manque un peu quand il s'agit de présenter tout ça de façon correcte.</p>

<p>Pour changer un peu des précédent articles dédiés au développement iPhone, je vais aujourd'hui présenter un petit outil Javascript, utilisant le Framework jQuery. Rien de révolutionnaire, c'est simplement un plugin jQuery permettant de dérouler un bandeau HTML au dessous d'un autre. J'ai appelé ce plugin &lsquo;helpBox&rsquo; car ce widget est particulièrement adapté pour afficher une aide contextuelle.</p>

<p>Voici le <strong> <a href="https://gist.github.com/1101480">code source</a></strong>.</p>

<!--more-->


<p>Rien de bien compliqué ici si l'on connais déjà la structure d'un plugin jQuery.
On commence par définir quelques paramètres&hellip;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">helpContent</span><span class="o">:</span><span class="s1">&#39;&amp;lt;p&amp;gt;help content&amp;lt;/p&amp;gt;&#39;</span><span class="p">,</span>  <span class="c1">// jQuery Selector or plain text HTML.</span>
</span><span class='line'><span class="nx">contentCls</span><span class="o">:</span><span class="s1">&#39;help-content&#39;</span><span class="p">,</span>          <span class="c1">// CSS Class applied to the help box.</span>
</span><span class='line'><span class="nx">buttonCls</span><span class="o">:</span><span class="s1">&#39;help-button&#39;</span><span class="p">,</span>            <span class="c1">// CSS Class applied to the help button.</span>
</span><span class='line'><span class="nx">buttonText</span><span class="o">:</span><span class="s1">&#39;Help&#39;</span>                   <span class="c1">// Help Button text</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ensuite, le plugin &lsquo;helpBox&rsquo; se contente de recherche le code HTML du contenu de l'aide pour l'ajouter au document avec le bouton associé.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">options</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Gets help content</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">helpContent</span><span class="p">).</span><span class="nx">size</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="p">)</span> <span class="o">?</span> <span class="nx">$</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">helpContent</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span> <span class="o">:</span> <span class="nx">o</span><span class="p">.</span><span class="nx">helpContent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Appends help box and help button</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&amp;amp;lt;div class=&#39;&quot;</span><span class="o">+</span><span class="nx">o</span><span class="p">.</span><span class="nx">contentCls</span><span class="o">+</span><span class="s2">&quot;&#39;&amp;gt;&quot;</span> <span class="o">+</span> <span class="nx">content</span> <span class="o">+</span> <span class="s2">&quot;&amp;amp;lt;/div&amp;gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&amp;amp;lt;div class=&#39;&quot;</span><span class="o">+</span><span class="nx">o</span><span class="p">.</span><span class="nx">buttonCls</span><span class="o">+</span><span class="s2">&quot;&#39;&amp;gt;&amp;amp;lt;a href=&#39;#&#39;&amp;gt;&quot;</span><span class="o">+</span><span class="nx">o</span><span class="p">.</span><span class="nx">buttonText</span><span class="o">+</span><span class="s2">&quot;&amp;amp;lt;/a&amp;gt;&amp;amp;lt;/div&amp;gt;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="o">+</span><span class="nx">o</span><span class="p">.</span><span class="nx">contentCls</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ensuite, il ajoute deux gestionnaires d’événement au bouton: un &lsquo;mouseover&rsquo; pour ouvrir le dialogue d'aide et un &lsquo;click&rsquo; pour fermer ce dernier.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Open the box on button mouseover, close it on click</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;.</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">+</span><span class="nx">o</span><span class="p">.</span><span class="nx">buttonCls</span><span class="o">+&amp;</span><span class="nx">lsquo</span><span class="p">;</span> <span class="nx">a</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">mouseover</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">prev</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="o">+</span><span class="nx">o</span><span class="p">.</span><span class="nx">contentCls</span><span class="o">+</span><span class="s1">&#39;:hidden&#39;</span><span class="p">).</span><span class="nx">slideDown</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}).</span><span class="nx">click</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">prev</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="o">+</span><span class="nx">o</span><span class="p">.</span><span class="nx">contentCls</span><span class="o">+</span><span class="s1">&#39;:visible&#39;</span><span class="p">).</span><span class="nx">slideUp</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Voilà tout. Facile non?</p>

<ul>
<li>Le code complet est ici: <strong> <a href="https://gist.github.com/1101480">jquery.helpbox.js</a> </strong></li></li>
</ul>


<p>Quelques ressources utiles pour finir:</p>

<ul>
<li><a href="http://docs.jquery.com/Plugins/Authoring">jQuery Plugin Authoring</a></li>
<li><a href="http://www.learningjquery.com/2007/10/a-plugin-development-pattern">Les bases du développement de plugin jQuery</a> sur learningjquery.com</li>
</ul>


<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
