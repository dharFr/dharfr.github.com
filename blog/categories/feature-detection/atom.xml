<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Feature Detection | dhar's Blog]]></title>
  <link href="http://www.dhar.fr/blog/categories/feature-detection/atom.xml" rel="self"/>
  <link href="http://www.dhar.fr/"/>
  <updated>2012-08-18T20:56:23+02:00</updated>
  <id>http://www.dhar.fr/</id>
  <author>
    <name><![CDATA[Olivier Audard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[File Upload Form - Part 2: Loosely Coupled Modules]]></title>
    <link href="http://www.dhar.fr/blog/2012/04/07/file-upload-form-part-2-loosely-coupled-modules/"/>
    <updated>2012-04-07T17:48:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2012/04/07/file-upload-form-part-2-loosely-coupled-modules</id>
    <content type="html"><![CDATA[<p>In this post, I'll continue to work on the code started in the first article on <a href="/blog/2012/03/24/file-upload-form-part-1-feature-detection/">Feature Detection and File Upload Forms</a>, so you'd better read it before going further.</p>

<p>Last time, we created a Javascript component used to upload a file asynchronously on the server.
It uses <code>FormData</code> and <code>FileList</code> APIs in modern browsers but also degrades gracefully with browsers that don't support those APIs.</p>

<p>This time, I'll explain how to handle the thumbnail associated to the file input field.
It's a good example to introduce <em>loosely coupled modules</em>, and to show some other uses of the <em>feature detection</em> technique.</p>

<p>As mentioned in the previous post, you can find the source code on Github: <a href="https://github.com/dharFr/uploader-thumbnail/">uploader-thumbnail</a>.</p>

<h3>Loosely Coupled Modules</h3>

<p>If you never hear about loosely coupled module, I highly recommended you to read/watch the following:</p>

<ul>
<li>Nicholas Zakas' talk on <a href="http://www.youtube.com/watch?v=vXjVFPosQHw">Scalable JavaScript Application Architecture</a> [YouTube]</li>
<li>Addy Osmani's <a href="http://addyosmani.com/largescalejavascript/">Patterns For Large-Scale JavaScript Application Architecture</a></li>
</ul>


<!-- more -->


<p>Those links will give you a pretty good picture but to summarize briefly, the main  concepts to keep in mind when you want to rely on a <em>loosely coupled modules</em> architecture is that you need to:</p>

<ul>
<li>Split your code into separate modules, obviously.</li>
<li>Don't allow a module to know about each-other.</li>
</ul>


<p>How could you do that? Let's try to illustrate the idea with our file upload form.</p>

<h3>Creating modules</h3>

<p>We will create three simple modules to complete our file upload form, each one related to a very simple functionality:</p>

<ul>
<li>1st Module <code>uploader</code>: uploads a file</li>
<li>2nd Module <code>remover</code>: ask for deleting a previously uploaded file</li>
<li>3rd Module <code>thumbnail</code>: display a thumbnail</li>
</ul>


<p>In <a href="/blog/2012/03/24/file-upload-form-part-1-feature-detection/">the first part</a> we have already build the first one. As the two other ones are quite easy to implement, I won't detail every piece of code in this post. Feel free to look at the <a href="https://github.com/dharFr/uploader-thumbnail/">complete source</a> if necessary. For now let's see those two as black boxes that fits with our requirements.</p>

<h3>Communication between modules: introducing the observer</h3>

<h4>The Observer Pattern</h4>

<p>As mentioned before, our modules can't reference each-other. In other words, in the <code>uploader</code>'s code, calling a method from the <code>thumbnail</code> object or referring to it in any other way is forbidden.</p>

<p>``` js</p>

<pre><code>// uploader's inside code
thumbnail.display(picture) // &lt;-- WRONG!
</code></pre>

<p>```
That's why we need to introduce the observer component. Its role is to allow communication between modules. In other words, instead of talking directly to each-others, modules in your application will talk and listen to the observer.</p>

<p>There many different implementations of the observer pattern but it's basically a component with 3 methods:
``` js</p>

<pre><code>var observer = {
  publish: function( topic ) { 
    // ...
  },
  subscribe: function ( topic, func ) {
    // ...
  },
  unsubscribe: function ( topic, func ) {
    // ...
  }
}
</code></pre>

<p>```</p>

<ul>
<li><code>observer.publish('some-topic', message)</code>: send a message on the topic 'some-topic'</li>
<li><code>observer.subscribe('some-topic', callbackFunc)</code>: starts listening messages on the topic 'some-topic'. <code>callbackFunc</code> will be called every times a message is published on the topic, the <code>message</code> will be passed as a parameter.</li>
<li><code>observer.publish('some-topic', callbackFunc)</code>: stops listening messages on the topics 'some-topic'.</li>
</ul>


<h4>Using the observer</h4>

<p>Back the the upload form, the implementation doesn't change that much. You only need to pass the observer as parameter, and publish some events to notify the application</p>

<p>``` javascript adding the observer https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/public/js/step3/upload.js#L13 Source</p>

<pre><code>this.obs = options.observer || {publish:function(){}, subscribe:function(){}};
</code></pre>

<p>```</p>

<p>``` javascript notifying the observer https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/public/js/step3/upload.js#L132-144 Source</p>

<pre><code>beforeUpload: function(file) {
  this.obs.publish('submit.uploader', this.fileId, file);
},

onUploadDone: function(data) {

  // ...
  this.obs.publish('uploaded.uploader', this.fileId, this.data);
}
</code></pre>

<p>```</p>

<p>On the other side, the thumbnail module need to listen to these events and to react to these in an appropriate way. In our case, when receiving a <code>submit</code> event, the thumbnail module should hide an existing image and display a load indicator. When receiving a <code>uploaded</code> event, it have to show the newly uploaded picture.</p>

<p>``` javascript listening to the observer https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/public/js/step3/thumbnail.js#L19-31 Source</p>

<pre><code>Thumbnail.prototype = {
  init: function() {
    // ...

    // Observe uploader events
    this.obs.subscribe('submit.uploader', $.proxy(this.onUploadStart, this));
    this.obs.subscribe('uploaded.uploader', $.proxy(this.onUploadDone, this));

    return this;
  },
  // ...
}
</code></pre>

<p><code>``
As you can see in the above code, both</code>uploader<code>and</code>thumbnail` module are not aware from each others, they only talk and listen to the observer.</p>

<h3>Conclusion</h3>

<ul>
<li>You mat decide to completely change some module implementation, as long as it sends the same messages to the observer, everything is fine.</li>
<li>Every other module in your application can listen to observer. The thumbnail may not be the only piece of application interested in <code>uploader</code> events. That's fine, the new module just need to subscribe the appropriate event.</li>
<li>Last but not least, if some module appears to be broken, or if it doesn't starts as expected, other modules won't be much affected and your application is still working (even if some features are down).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File Upload Form - Part 1: Feature Detection]]></title>
    <link href="http://www.dhar.fr/blog/2012/03/24/file-upload-form-part-1-feature-detection/"/>
    <updated>2012-03-24T16:55:00+01:00</updated>
    <id>http://www.dhar.fr/blog/2012/03/24/file-upload-form-part-1-feature-detection</id>
    <content type="html"><![CDATA[<p>Last Thursday, I gave a talk at <a href="http://www.twitter.com/jssophia">@JSSophia</a>, the local Javascript User Group I co-founded with <a href="http://www.twitter.com/FredGuillaume">@FredGuillaume</a>.
The group is just starting (2nd meeting), so there were only a few people, but as some of them looked quite interested by my talk, and some other couldn't come due to personal or professional duties, I thought I could write a couple of blog posts about the same topic.</p>

<p>I choose <em>File Upload Form</em> example because it's standalone, frequently used and it can be improved by many ways with HTML5 APIs.
It's a good example to introduce some very important Javascript concepts:</p>

<ol>
<li>Using <strong>feature detection</strong> for <strong>progressive enhancement</strong></li>
<li>Using <strong>loosely coupled modules</strong> to architecture web applications.</li>
</ol>


<p>This post focus on the first part of the talk.
It presents the <em>feature detection</em> technique.
I'll cover the second part, <em>loosely coupled modules</em>, in another article.</p>

<p>If you're in a hurry, or simply don't want to read the whole post, you'll find the slides embedded below and everything else on Github:</p>

<ul>
<li>The final <a href="https://github.com/dharFr/uploader-thumbnail/">uploader-thumbnail</a> source code.</li>
<li>The <a href="https://github.com/dharFr/uploader-thumbnail/tree/step-by-step-demo">step by step demo</a> I used during the talk.</li>
<li>The <a href="https://github.com/dharFr/uploader-thumbnail/tree/slides">slides</a>.</li>
</ul>


<p>The talk was in French so the slides are also written in French, even if it uses a lot of English keywords.</p>

<div class="dhar-style-embedder">
    <style>
        .clearfix { clear:both; }
        div.keep-aspect-ratio { max-width:600px;margin:0 auto; }
        div.keep-aspect-ratio > div { border:0;padding:0;margin:0;position:relative; }
        div.keep-aspect-ratio > div > img { border:0;padding:0;margin:0;z-index:-1000;position:relative;top:0;bottom:0;left:0;width:100%;display:block; }
        div.keep-aspect-ratio > div > div { border:0;padding:0;margin:0;position:absolute;top:0;bottom:0;left:0;width:100%;overflow:auto;}
    </style>
    <div class="keep-aspect-ratio">
    <div><img src="http://www.dhar.fr/assets/dhar/aspect-ratio-4-3.png" /><div>
    <iframe src="http://www.dhar.fr/assets/embedder.html#uploader-thumbnail/slides.html" frameborder="0" width="100%" height="95%"></iframe>
    </div></div><div class="clearfix"></div>
    </div>
</div>




<!-- more -->


<h3>Initial Markup</h3>

<p>The main idea in progressive enhancement is to provide an application that work in any context.
A good approach is to start development with features that will work (quite) everywhere, and <em>progressively</em> add more specific features to improve your application's user experience in modern browsers.</p>

<p>Talking about <em>file upload form</em>, our starting point is a simple HTML markup.</p>

<p>``` html Initial Markup https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/views/upload.ejs Source</p>

<pre><code>&lt;form id="upload-form" action="" method="post" enctype="multipart/form-data"&gt;

    &lt;label for="upload"&gt;Go Upload Something&lt;/label&gt;&lt;br&gt;

    &lt;input type="hidden" name="fileId" value="12345"&gt;
    &lt;input type="file" name="upload" id="upload" accept="image/*"&gt;
    &lt;input type="submit" value="Upload"&gt;
&lt;/form&gt;
</code></pre>

<p>```</p>

<p>It's simple, works in every browser and, assuming the server behind do his job, it works without a single line of Javascript.
On the other hand, it requires a full page reload so the first thing to do to bring some <em>hype</em> in this is to allow uploading the file with an asynchronous request.</p>

<h3>Feature detection</h3>

<p>Uploading a file trough an asynchronous request isn't that easy.
The <a href="https://developer.mozilla.org/en/DOM/XMLHttpRequest/FormData">FormData</a> API perfectly fits our needs but it's not well supported across all browsers (IE, I'm looking at you... See <a href="https://developer.mozilla.org/en/DOM/XMLHttpRequest/FormData#Browser%20compatibility">Browser_compatibility</a> section).</p>

<p>Remember that our main concern is to provide the best user experience on each browser.
So how do we upload a file <em>asynchronously</em> in a browser that don't support <code>FormData</code> API?
Answer is by using an <code>iframe</code>.</p>

<h4>iframe file upload</h4>

<p>Please note that I started by creating a jQuery plugin to make the code more easily reusable.
I also hid the submit button and the bound event 'onchange' on the input field to submit the form.
The following code snippets come from <a href="https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/public/js/step1/upload.js">step1/upload.js</a> file.</p>

<p>First, we have to listen to the <code>submit</code> event to prepare the form:</p>

<p>``` javascript form submit event listener https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/public/js/step1/upload.js#L26-31 Source</p>

<pre><code>this.$form.on('submit.uploader', $.proxy(function(){

    // old-school iframe method
    this.prepareIframeUpload();
    return true; // submit the form
}, this));
</code></pre>

<p>```</p>

<p>Next, let's append an hidden <code>iframe</code> to the form and define the <code>target</code> attribute to match the <code>iframe</code> id.
Once done, the form can be submitted as usual, the server's answer will be loaded into the <code>iframe</code>.</p>

<p>However, due to security concerns, we won't be able to read the <code>iframe</code> content once loaded, so we also need to create a callback function and to send the function name to the server as a URL parameter.
This way, the server script will be aware that we are using an <code>iframe</code> and will be able to generate the appropriate response.</p>

<p>``` javascript iframe upload https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/public/js/step1/upload.js#L47-80 Source
prepareIframeUpload: function() {</p>

<pre><code>var id, cb, iframe, url;

// Generating a random id to identify
// both the iframe and the callback function
this.id = Math.floor(Math.random() * 1000);
id = "uploader-frame-" + this.id;
cb = "uploader-cb-" + this.id;

// creating iframe and callback
iframe = $('&lt;iframe id="'+id+'" name="'+id+'" style="display:none;"&gt;');
url = this.$form.attr('action');

this.$form
    .attr('target', id)
    .append(iframe)
    .attr('action', url + '?iframe=' + cb);

// defining callback
window[cb] = $.proxy(function(data) {
    console.log('received callback:', data);

    // removing iframe
    iframe.remove();
    this.$form.removeAttr('target');

    // removing callback
    this.$form.attr('action', url);
    window[cb] = undefined;

    this.onUploadDone(data);
}, this);
</code></pre>

<p>},
<code>``
Knowing that the server response will be loaded as</code>iframe<code>content, the server script has to generate this small piece of HTML.
It includes a</code>script<code>tag, witch calls the</code>callback<code>function on the parent window. The json</code>result` is send as a parameter of that function.</p>

<p>``` html server response https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/views/upload-iframe.ejs Source</p>

<pre><code>&lt;script type="text/javascript"&gt;
window.top.window['&lt;%- callback %&gt;'](&lt;%- result %&gt;);
&lt;/script&gt;
</code></pre>

<p>```</p>

<p>Here we are.
Our script can send files asynchronously, without reloading the whole page, and it even works with old browsers.
Of course, we could decide to stop there, but we won't because of the following:</p>

<ul>
<li>No Error handling: if something goes wrong while sending the file, or if the server don't render the good response, the callback function will never be called, and we can't handle the error.
You probably want to add a timeout to the script above to avoid waiting for an answer that would never come.</li>
<li>It's not AJAX.
You probably already notice this point.
We are faking it.
The form is still sent as HTML form, we only changed his target.
The file is uploaded asynchronously, but without any XmlHttpRequest involved.</li>
<li>It's dirty.
I'm OK as it stays a fall-back solution, but keeping it as the main implementation? Yuck!</li>
</ul>


<h4>FormData file upload</h4>

<p>Time to do things the right way? OK. Let's start by editing the submit event listener as following:</p>

<p>``` javascript updated submit event listener https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/public/js/step2/upload.js#L26-46 Source</p>

<pre><code>this.$form.on('submit.uploader', $.proxy(function(){

    var file = false
    if (this.$upload[0].files) file = this.$upload[0].files[0];

    this.beforeUpload(file);

    if (window.FormData &amp;&amp; file ) {

        console.log('FormData supported and file is:', file);
        this.upload(file);
        return false;
    }
    // fallback to old-school iframe method
    else {
        console.log('FormData is not supported or file is undefined:', file);
        this.prepareIframeUpload();
        return true; // submit the form
    }

}, this));
</code></pre>

<p>```</p>

<p>The <code>this.$upload</code> variable represents a jQuery object containing the <code>input[type=file]</code> DOM node (see the complete <a href="https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/public/js/step2/upload.js">step2/upload.js</a> file for more details).
Here we have to check if the browser supports both <code>File</code> and <code>FormData</code> APIs.
If these two conditions are satisfied, we can go with the <em>"HTML5"</em> file upload.
Otherwise, we just fall-back to the <code>iframe</code> hack... Simple isn't it?</p>

<p>This is <strong>Feature Dectection</strong> and it's one of the <strong>key concepts of modern web development</strong>.
It's the only way we have to use the latest HTML5 features without breaking old browser's support.</p>

<p>Now, we're sure that we can use <code>FormData</code> upload, we just need to implement the method as shown in the following code extract.
As you can read, it's way simpler and less hacky compared to the <code>iframe</code> method.
Server response and errors are handled the same way than with any other ajax request.</p>

<p>``` javascript FormData upload https://github.com/dharFr/uploader-thumbnail/blob/step-by-step-demo/public/js/step2/upload.js#L61-80 Source</p>

<pre><code>upload: function(file) {

    var formdata = new FormData(this.$form[0]);

    if (formdata) {
        var jqXhr = $.ajax({
            url: this.$form.attr('action'),
            type: this.$form.attr('method'),
            data: formdata,
            // tells jQuery not to prepare data before sending the request
            processData: false, 
            contentType: false
        });

        jqXhr
            .done($.proxy(this.onUploadDone, this))
            .fail(function(){
                console.log("upload error:", arguments);
            });
    }
},
</code></pre>

<p>```</p>

<p>We're done for part 1.
Our upload form is fully functional for both modern and old browsers, and even with Javascript disabled.
In the 2nd part, I explain how to handle the thumbnail associated to the file input field.
It's a very good example to introduce <em>loosely coupled modules</em>, and to show some other uses of the <em>feature detection</em> technique.
<a href="/blog/2012/04/07/file-upload-form-part-2-loosely-coupled-modules/">File Upload Form - Part 2: Loosely Coupled Modules</a></p>

<h3>References:</h3>

<ul>
<li><a href="https://developer.mozilla.org/en/Browser_detection_using_the_user_agent">Browser detection using the user agent</a> on MDC</li>
<li><a href="https://developer.mozilla.org/en/DOM/XMLHttpRequest/FormData">FormData</a> API</li>
<li><a href="https://developer.mozilla.org/en/DOM/FileList">FileList</a> API</li>
</ul>

]]></content>
  </entry>
  
</feed>
