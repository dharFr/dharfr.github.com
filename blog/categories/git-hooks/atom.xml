<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git hooks | dhar's Blog]]></title>
  <link href="http://www.dhar.fr/blog/categories/git-hooks/atom.xml" rel="self"/>
  <link href="http://www.dhar.fr/"/>
  <updated>2013-01-25T02:41:45+01:00</updated>
  <id>http://www.dhar.fr/</id>
  <author>
    <name><![CDATA[Olivier Audard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some fun with git hooks and Grunt.js]]></title>
    <link href="http://www.dhar.fr/blog/2012/07/23/some-fun-with-git-hooks-and-grunt-dot-js/"/>
    <updated>2012-07-23T22:55:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2012/07/23/some-fun-with-git-hooks-and-grunt-dot-js</id>
    <content type="html"><![CDATA[<p>Before going further, I'll start by saying that I'm a Git and Github noob, so if you have a better solution to achieve the same goal, give me a shout, I'll be happy to hear it..!</p>

<p>A few weeks ago, I implemented a small bookmarklet to apply <a href="https://code.google.com/p/google-code-prettify/">google-code-prettify</a> anywhere on the Web.
I put the source code <a href="https://github.com/dharFr/prettyprint-bookmarklet">on Github</a> and used the (<em>awesome</em>) <a href="https://help.github.com/articles/creating-pages-with-the-automatic-generator">Automatic Page Generator</a> to quickly create a landing page to host my bookmarklet.</p>

<p>The generated page lives on the same repository, on a branch called <code>gh-pages</code>.
At this point, my concern was the following: How could I include the bookmarklet link on <code>gh-pages</code> branch from the source code living on the <code>master</code>?</p>

<!-- more -->


<h2>Basic (handmadeâ„¢) workflow</h2>

<p>In a first try, I could just copy/paste the minified source into an <code>&lt;a href="..."&gt;</code> link in my <code>index.html</code>.
But what happens if I update the source?
I'll probably have to deal with that kind of work flow:</p>

<p>``` sh
grunt # lint, concat and minifies source
git add .
git commit -m "Probably improved something in there"</p>

<h1>copy content from dist/prettyprinter.min.js</h1>

<p>git checkout gh-pages # checkout gh-pages branch</p>

<h1>paste code somewhere into index.html (without)</h1>

<p>git add .
git commit -m "Updated landing page with latest bookmarklet version"</p>

<p>git checkout master # back to master branch</p>

<p>```
Rather boring, right? Totally agree! And that's why I decided to dig a little further to see how I could automate this.</p>

<h2>Automate the whole thing!</h2>

<h3>Avoiding copy / paste</h3>

<p>Copy/paste a file from a branch to another <em>may</em> be acceptable if you do it only once. From there, it's probably better to use the following:</p>

<p>```
git checkout gh-pages # checkout gh-pages branch</p>

<h1>add/update 'dist' directory from master branch</h1>

<p>git checkout master -- dist<br/>
```</p>

<h3>Updating HTML content</h3>

<p>As mentioned earlier, I already used <a href="http://gruntjs.com/">grunt.js</a> to lint, concat and minify my source on the <code>master</code> branch.
So I searched for a way to use grunt to update the HTML link. I quickly found <a href="https://github.com/outaTiME/grunt-replace">grunt-replace</a>, perfect fit for the job.
I ended up with an HTML source file, with a placeholder for the bookmarklet:
<code>html
&lt;a href='@@bookmarklet'&gt;Prettify&lt;/a&gt;
</code>
And a simple grunt <code>replace</code> task, reading the minified source and generating an up-to-date <code>index.html</code>
``` js
  grunt.initConfig({</p>

<pre><code>replace: {
  dist: {
    src: ['src/index.html'],
    dest: '',
    variables: {
      bookmarklet: '&lt;%= grunt.file.read(\'dist/prettyprinter.min.js\') %&gt;'
    }
  }
}
</code></pre>

<p>  });
```</p>

<h3>Introducing Git Hooks</h3>

<p>Basically, <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">Git Hooks</a> allow you to automatically run custom scripts at any step in your workflow.
Hooks must be defined in the <code>.git/hooks/</code> folder.
Placeholder files are already created, giving a pretty good idea about what's possible or not.</p>

<p><code>bash
$ ls .git/hooks/
applypatch-msg.sample
commit-msg.sample
post-commit.sample
post-receive.sample
post-update.sample
pre-applypatch.sample
pre-commit.sample
pre-rebase.sample
prepare-commit-msg.sample
update.sample
</code>
You only need to remove the <code>.sample</code> extension to define a hook, then edit the script to create your own awesome automation.</p>

<h3>Bringing the pieces together</h3>

<p>In my case, I created a <code>post-commit</code> script. Right after every new commit on the <code>master</code> branch, this piece of code runs and does all the crappy work.</p>

<p>``` bash post-commit</p>

<h1>!/bin/sh</h1>

<p>echo "\n| [prettify bookmarklet post-commit hook]"
git checkout gh-pages</p>

<h1>Update bookmarklet script from master branch</h1>

<p>git checkout master -- dist lib</p>

<h1>update index.html &amp; commit changes</h1>

<p>grunt replace
git add .
git commit -m "Regenerated index.html from master branch"</p>

<p>git checkout master
echo "| All Done -- Use 'git push --all' instead of 'git push origin master' to push changes"
```</p>

<p>As both <code>master</code> and <code>gh-pages</code> branches are modified, they both need to be pushed on the remote repository.
I use <code>git push --all</code>, which is fine if you don't have any other updated branch. Otherwise, you'll need a specific push for each branch.</p>

<h2>Going further</h2>

<p>I'd like to find a way to stop the script if the commit doesn't occur on the <code>master</code> branch, but I'm not sure how to do it...</p>

<p>I'll probably also add a <code>pre-commit</code> hook to lint/concat/minify the source.
Grunt.js already simplified this to a one liner, but I often forget to call it before committing changes.</p>

<p>(Grunt + Git Hooks) appears to be a nice couple with a huge time-saving potential. I'd like to have an opportunity to try it on a larger project and see how it goes.</p>

<hr />

<h2>References</h2>

<ul>
<li><a href="http://lea.verou.me/2011/10/easily-keep-gh-pages-in-sync-with-master/">Easily keep gh-pages in sync with master</a> by Lea Verou</li>
<li><a href="http://oli.jp/2011/github-pages-workflow/">Github Pages Workflow</a> by by Oli Studholme</li>
<li><a href="http://get.inject.io/n/XxsZ6RE7">Git post-commit hook to keep master and gh-pages branch in sync</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
