<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Automation | dhar's Blog]]></title>
  <link href="http://www.dhar.fr/blog/categories/automation/atom.xml" rel="self"/>
  <link href="http://www.dhar.fr/"/>
  <updated>2012-11-18T17:53:25+01:00</updated>
  <id>http://www.dhar.fr/</id>
  <author>
    <name><![CDATA[Olivier Audard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grunt brings automation to the front-end side]]></title>
    <link href="http://www.dhar.fr/blog/2012/08/26/grunt-brings-automation-to-the-front-end-side/"/>
    <updated>2012-08-26T16:26:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2012/08/26/grunt-brings-automation-to-the-front-end-side</id>
    <content type="html"><![CDATA[<p>Over the past few weeks, I realized that I added <a href="http://www.gruntjs.com" title="Grunt">grunt</a> in every little side project I worked on.
Thinking about it, I'm not sure if I can even imagine to start a project without this tool.</p>

<p>You probably already heard about <strong>grunt</strong>, don't you? In case you don't (seriously?), it's been created by <a href="http://benalman.com/">Ben Alman (aka. cowboy)</a>.
I guess the best description is the one from the official home page:</p>

<blockquote><p>Grunt is a task-based command line build tool for JavaScript projects.</p></blockquote>

<p>OK, looks nice.
But what's new?
I already have tools to <em>lint</em> or <em>minify</em> my Javascript.
I already use <em>qunit</em> to unit test my code.
And so on... Why should I use <em>grunt</em> instead of all these tools?</p>

<p>Here is why:</p>

<ol>
<li>Because you probably don't really use all these tools.
I mean, for sure you know about them, and you already give them a try; but most people I worked with (including me) just don't use them on real projects, in their day to day work, because bringing the pieces together is not that easy.</li>
<li><em>Grunt</em> also uses the exact same tools you already know, or in the worst case, it can learn to use them.
It doesn't reinvent anything but allows you to organize your workflow in an uniform, yet flexible, way.</li>
</ol>


<h2>Do we need such a tool?</h2>

<p>As a front-end developer, automation wasn't really part of my workflow.
My first job was in some king of web agency were every desktop machine ran on Windows XP, and our main development tools were Dreamweaver MX (I guess I'm getting old...) and Filezilla. <!-- more -->
At the time we would never have considered automation, unit testing or continuous integration.</p>

<p>Then I left that company and found a real engineer job.
But still, like many other developers, I relied on some kind of heavy IDE where every <em>low level</em> interaction with the OS tend to be hidden.
And I never really felt a need to dig into this.
Until recently, I was convinced <em>automation</em> was only a concern for back-end or system engineers.</p>

<h2>Everything you need is a terminal!</h2>

<p>On the other hand, a lot of <em>front-end</em> tools came up recently, especially since <em>Node.js</em> brought Javascript to the Terminal but not only.
<strong>Uglify-js</strong>, <strong>JSLint</strong>, <strong>Qunit</strong>, <strong>Jasmine</strong>, <strong>CoffeeScript</strong>, <strong>SASS</strong>, <strong>LESS</strong> are only the most famous but there are many others.
These tools are changing our approach to front-end technologies, they make us more productive, adding value to our jobs.</p>

<p>But those tools remains <em>command line tools</em>.
Even if each one of them is pretty simple to setup and use, combining all of these to make something adapted to a particular project can quickly become a nightmare for someone who's not familiar with his Terminal.
From my experience, a lot of front-end developers, especially younger ones, are not familiar with Bash scripting (<em>and sometimes are afraid of it</em>). For sure, that's probably a bad approach, but that's how I felt not that long ago and I'm pretty sure I'm not the only one in that case.</p>

<p>Grails developers write their scripts in Groovy.
Rails developers have Rake files.
<strong>We know how to write Javascript!</strong> That's where we are comfortable and productive.
We don't want to get a headache by writing some messy <em>bash</em> script <sup>[<a href="#note1">1</a>]</sup>.</p>

<h2>Here comes grunt</h2>

<p>That's what <em>grunt</em> does. It allows you to define a bunch of tasks, in a <strong>consistent way</strong>, by writing Javascript.
<em>Consistent</em> is an important word here because you could probably achieve the same goal directly with <em>Node.js</em> but <em>grunt</em> gives you a simple way to write and organize your tasks.
The most common ones (<em>lint</em>, <em>concat</em>, <em>minify</em>, <em>test</em>, etc.) are already included <a href="https://github.com/cowboy/grunt#built-in-tasks" title="grunt built-in Tasks">in the package</a> so you don't have to think about how to deal with them.</p>

<p>It also came with a really simple <a href="https://github.com/cowboy/grunt/blob/master/docs/getting_started.md#loading-grunt-plugins-or-tasks-folders" title="Loading grunt plugins or tasks folders">plugin system</a> based on <a href="https://npmjs.org" title="Node Packaged Modules">npm</a>.
If you find yourself needing to do something not included as a build-in task, try to search <em>npm</em> to see if somebody else has not already released a plugin that fits your needs.
Otherwise, you can still write your own plugin and publish it to <em>npm</em>.
The <a href="https://github.com/cowboy/grunt/blob/master/docs/api.md" title="The grunt API">grunt API</a> allows you to do pretty much everything you could need.
And thanks to the built-in project scaffolding, it only takes a few minutes to change your spaghetti code into a well written plugin. Once here, publishing to npm is just a command line away so do not hesitate.</p>

<h2>What's next?</h2>

<p>I hope you will give a try to <em>grunt</em>. Even more because something called <a href="http://yeoman.io/">Yeoman</a> is getting close to the public release. I asked for a beta invite on twitter but for now, I didn't have a chance to try it yet.
It seems that it can do many more and as it's based on <em>grunt</em>, among many others, it's probably a good idea to get familiar with that one as soon as possible.</p>

<p><a id="note1"></a>
<small>[1]: I actually did a lot of bash scripting recently and, believe it or not, I liked it. I wouldn't have said that a few years ago. It's a powerful programming tool and every developer should be comfortable with it. You're not? Learn some basics. ;)</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some fun with git hooks and Grunt.js]]></title>
    <link href="http://www.dhar.fr/blog/2012/07/23/some-fun-with-git-hooks-and-grunt-dot-js/"/>
    <updated>2012-07-23T22:55:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2012/07/23/some-fun-with-git-hooks-and-grunt-dot-js</id>
    <content type="html"><![CDATA[<p>Before going further, I'll start by saying that I'm a Git and Github noob, so if you have a better solution to achieve the same goal, give me a shout, I'll be happy to hear it..!</p>

<p>A few weeks ago, I implemented a small bookmarklet to apply <a href="https://code.google.com/p/google-code-prettify/">google-code-prettify</a> anywhere on the Web.
I put the source code <a href="https://github.com/dharFr/prettyprint-bookmarklet">on Github</a> and used the (<em>awesome</em>) <a href="https://help.github.com/articles/creating-pages-with-the-automatic-generator">Automatic Page Generator</a> to quickly create a landing page to host my bookmarklet.</p>

<p>The generated page lives on the same repository, on a branch called <code>gh-pages</code>.
At this point, my concern was the following: How could I include the bookmarklet link on <code>gh-pages</code> branch from the source code living on the <code>master</code>?</p>

<!-- more -->


<h2>Basic (handmadeâ„¢) workflow</h2>

<p>In a first try, I could just copy/paste the minified source into an <code>&lt;a href="..."&gt;</code> link in my <code>index.html</code>.
But what happens if I update the source?
I'll probably have to deal with that kind of work flow:</p>

<p>``` sh
grunt # lint, concat and minifies source
git add .
git commit -m "Probably improved something in there"</p>

<h1>copy content from dist/prettyprinter.min.js</h1>

<p>git checkout gh-pages # checkout gh-pages branch</p>

<h1>paste code somewhere into index.html (without)</h1>

<p>git add .
git commit -m "Updated landing page with latest bookmarklet version"</p>

<p>git checkout master # back to master branch</p>

<p>```
Rather boring, right? Totally agree! And that's why I decided to dig a little further to see how I could automate this.</p>

<h2>Automate the whole thing!</h2>

<h3>Avoiding copy / paste</h3>

<p>Copy/paste a file from a branch to another <em>may</em> be acceptable if you do it only once. From there, it's probably better to use the following:</p>

<p>```
git checkout gh-pages # checkout gh-pages branch</p>

<h1>add/update 'dist' directory from master branch</h1>

<p>git checkout master -- dist<br/>
```</p>

<h3>Updating HTML content</h3>

<p>As mentioned earlier, I already used <a href="http://gruntjs.com/">grunt.js</a> to lint, concat and minify my source on the <code>master</code> branch.
So I searched for a way to use grunt to update the HTML link. I quickly found <a href="https://github.com/outaTiME/grunt-replace">grunt-replace</a>, perfect fit for the job.
I ended up with an HTML source file, with a placeholder for the bookmarklet:
<code>html
&lt;a href='@@bookmarklet'&gt;Prettify&lt;/a&gt;
</code>
And a simple grunt <code>replace</code> task, reading the minified source and generating an up-to-date <code>index.html</code>
``` js
  grunt.initConfig({</p>

<pre><code>replace: {
  dist: {
    src: ['src/index.html'],
    dest: '',
    variables: {
      bookmarklet: '&lt;%= grunt.file.read(\'dist/prettyprinter.min.js\') %&gt;'
    }
  }
}
</code></pre>

<p>  });
```</p>

<h3>Introducing Git Hooks</h3>

<p>Basically, <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">Git Hooks</a> allow you to automatically run custom scripts at any step in your workflow.
Hooks must be defined in the <code>.git/hooks/</code> folder.
Placeholder files are already created, giving a pretty good idea about what's possible or not.</p>

<p><code>bash
$ ls .git/hooks/
applypatch-msg.sample
commit-msg.sample
post-commit.sample
post-receive.sample
post-update.sample
pre-applypatch.sample
pre-commit.sample
pre-rebase.sample
prepare-commit-msg.sample
update.sample
</code>
You only need to remove the <code>.sample</code> extension to define a hook, then edit the script to create your own awesome automation.</p>

<h3>Bringing the pieces together</h3>

<p>In my case, I created a <code>post-commit</code> script. Right after every new commit on the <code>master</code> branch, this piece of code runs and does all the crappy work.</p>

<p>``` bash post-commit</p>

<h1>!/bin/sh</h1>

<p>echo "\n| [prettify bookmarklet post-commit hook]"
git checkout gh-pages</p>

<h1>Update bookmarklet script from master branch</h1>

<p>git checkout master -- dist lib</p>

<h1>update index.html &amp; commit changes</h1>

<p>grunt replace
git add .
git commit -m "Regenerated index.html from master branch"</p>

<p>git checkout master
echo "| All Done -- Use 'git push --all' instead of 'git push origin master' to push changes"
```</p>

<p>As both <code>master</code> and <code>gh-pages</code> branches are modified, they both need to be pushed on the remote repository.
I use <code>git push --all</code>, which is fine if you don't have any other updated branch. Otherwise, you'll need a specific push for each branch.</p>

<h2>Going further</h2>

<p>I'd like to find a way to stop the script if the commit doesn't occur on the <code>master</code> branch, but I'm not sure how to do it...</p>

<p>I'll probably also add a <code>pre-commit</code> hook to lint/concat/minify the source.
Grunt.js already simplified this to a one liner, but I often forget to call it before committing changes.</p>

<p>(Grunt + Git Hooks) appears to be a nice couple with a huge time-saving potential. I'd like to have an opportunity to try it on a larger project and see how it goes.</p>

<hr />

<h2>References</h2>

<ul>
<li><a href="http://lea.verou.me/2011/10/easily-keep-gh-pages-in-sync-with-master/">Easily keep gh-pages in sync with master</a> by Lea Verou</li>
<li><a href="http://oli.jp/2011/github-pages-workflow/">Github Pages Workflow</a> by by Oli Studholme</li>
<li><a href="http://get.inject.io/n/XxsZ6RE7">Git post-commit hook to keep master and gh-pages branch in sync</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
