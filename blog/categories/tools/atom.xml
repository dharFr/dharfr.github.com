<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | dhar's blog]]></title>
  <link href="http://www.dhar.fr/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://www.dhar.fr/"/>
  <updated>2013-05-12T23:46:39+02:00</updated>
  <id>http://www.dhar.fr/</id>
  <author>
    <name><![CDATA[Olivier Audard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding Grunt to your web-application project]]></title>
    <link href="http://www.dhar.fr/blog/2012/10/28/adding-grunt-to-your-web-application-project/"/>
    <updated>2012-10-28T00:24:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2012/10/28/adding-grunt-to-your-web-application-project</id>
    <content type="html"><![CDATA[<p>A few weeks ago, a gave a quick talk about <a href="http://www.gruntjs.com" title="Grunt homepage">Grunt</a> at <a href="http://www.twitter.com/jssophia" title="JS Sophia-Antipolis">@JSSophia</a>, our local Javascript User Group.
During this talk, my purpose was to quickly present the tool and show some example use cases.
I must confess I wasn&rsquo;t as prepared as I would have been, so my talk may have been confused or unclear from time to time.
If you attended the event, I hope this post will give you more details.
If not, it doesn&rsquo;t matter, I&rsquo;m still happy to share my thoughts about this amazing tool.</p>

<p>You&rsquo;ll find the slides bellow.
The first part mostly present <em>Grunt</em> and why I think it&rsquo;s a game-changer for front-end developers. As I already wrote about this in my <a href="/blog/2012/08/26/grunt-brings-automation-to-the-front-end-side/" title="Grunt Brings Automation to the Front-end Side">previous post about Grunt</a>, I invite you to read it if it sounds interesting to you.
In the second part, I focused on showing a few examples use cases and concrete examples.
That&rsquo;s what I&rsquo;m going to detail in this post.</p>

<div class="dhar-style-embedder">
  <style>
    .clearfix { clear:both; }
    div.keep-aspect-ratio { max-width:600px;margin:0 auto; }
    div.keep-aspect-ratio > div { border:0;padding:0;margin:0;position:relative; }
    div.keep-aspect-ratio > div > img { border:0;padding:0;margin:0;z-index:-1000;position:relative;top:0;bottom:0;left:0;width:100%;display:block; }
    div.keep-aspect-ratio > div > div { border:0;padding:0;margin:0;position:absolute;top:0;bottom:0;left:0;width:100%;overflow:auto;}
  </style>
  <div class="keep-aspect-ratio">
  <div><img src="http://www.dhar.fr/assets/dhar/aspect-ratio-4-3.png" /><div>
  <iframe src="http://www.dhar.fr/assets/slides/embedder.html#grunt/template.html" frameborder="0" width="100%" height="95%"></iframe>
  </div></div><div class="clearfix"></div>
  </div>
</div>




<!-- more -->


<h2>Automating your web application</h2>

<p>Bringing some automation to your web-application is probably the first thing you&rsquo;ll try with Grunt.
After all, that&rsquo;s its first purpose, why it was designed for.</p>

<p>Because nothing worth an example, I reused an old project to illustrate this case.
It&rsquo;s a simple Gallery application build over Backbone.JS, jQuery, QUnit and Twitter Bootstrap.
The full project is available <a href="https://github.com/dharFr/gallery" title="Gallery App: 'master' branch">on Github</a>.
The code I used as an example lives in the <em>master</em> branch.
The original code, as it was before adding Grunt, lives in the <a href="https://github.com/dharFr/gallery/tree/before-grunt" title="Gallery App: 'before-grunt' branch">before-grunt</a> branch.</p>

<h3>Adding Grunt to an existing project</h3>

<p>Assuming Grunt is already <a href="https://github.com/gruntjs/grunt#installing-grunt" title="Installing Grunt">installed</a> on your system, adding Grunt to your project is as simple as typing the following in your terminal:</p>

<p>``` bash</p>

<blockquote><p>cd /path/to/your/project/
grunt init:gruntfile
```</p></blockquote>

<p>After answering a few question, this will produce a single <code>grunt.js</code> file in your project&rsquo;s folder.
The basic structure of a gruntfile is looks like this:</p>

<p>``` js grunt file basic structure
/<em>global module:false</em>/
module.exports = function(grunt) {</p>

<p>  // Project configuration.
  grunt.initConfig({</p>

<pre><code>// ...
taskName: {
  // task properties
},
// ...
</code></pre>

<p>  });
};
```</p>

<p>We are working with a web-application, so most of the tasks we need are already included in grunt.
What do we basically need ?</p>

<ul>
<li><em>lint</em> javascript files</li>
<li>run <em>qunit</em> unit tests</li>
<li><em>concat</em> and <em>minify</em> javascript files</li>
</ul>


<p>In addition, it would be interesting to:</p>

<ul>
<li>run <em>qunit</em> tests again on the minified <code>js</code> files to check if anything is broken in the process</li>
<li><em>copy</em> assets (<code>css</code>, pictures, etc.) to a build folder in order to have a standalone built version of the application</li>
<li>create an alternative version of the <code>html</code> files containing minified <code>js</code> files rather than development files</li>
</ul>


<h3>Setting up your tasks</h3>

<p>Lint, QUnit, concatenation and minification tasks are already built in Grunt. It won&rsquo;t be too difficult to define these for our project.
If you need another task, start by searching if an existing <code>grunt-plugin</code> have already been created by the community.
You can search for an existing plugin on <a href="http://www.gruntjs.com" title="Grunt homepage">grunt homepage</a> or directly with npm:</p>

<p>``` bash Searching for grunt plugins on NPM</p>

<h1>Search for a grunt plugin to do some magic:</h1>

<blockquote><p>npm search gruntplugin &lsquo;do magic&rsquo;
```</p></blockquote>

<p>Otherwise, you can define your own task using the <a href="https://github.com/gruntjs/grunt/blob/master/docs/api.md" title="Grunt API">Grunt API</a>, but unless you need something very specific, I doubt you had to go there.
Seriously, there are already 190 existing plugins at the time I write these lines.</p>

<p>Once you&rsquo;ve found and installed the plugin you need, you still have to made it available in your <code>gruntfile</code> by using the <code>loadNpmTasks</code> api.
In our case, we&rsquo;ll need two external tasks:</p>

<p><code>js Loading external tasks https://github.com/dharFr/gallery/blob/master/grunt.js#L125-126 source
  // ...
  grunt.loadNpmTasks('grunt-contrib-copy');
  grunt.loadNpmTasks('grunt-targethtml');
  // ...
</code></p>

<p>From there, we just need to configure our tasks.
I&rsquo;m not going to detail every single line in the resulting <code>gruntfile</code> bellow.
Basically, it allows us to build (lint, concat and minify) javascript files, copy any other files to a <code>dist</code> folder, and run the tests on both <code>dev</code> and <code>dist</code> files.
The syntax is quite self-explaining and you can always refer to the <a href="https://github.com/gruntjs/grunt/blob/master/docs/toc.md" title="Grunt Documentation">official documentation</a> is needed.</p>

<p>``` js Extract from Gallery Gruntfile <a href="https://github.com/dharFr/gallery/blob/master/grunt.js">https://github.com/dharFr/gallery/blob/master/grunt.js</a> source
/<em>global module:false</em>/
module.exports = function(grunt) {</p>

<p>  // Project configuration.
  grunt.initConfig({</p>

<pre><code>// read some data from package.json file
pkg: '&lt;json:package.json&gt;',
// Defines project's meta data
// the banner is used by minification task and 
// will be at the beginning of each processed file
meta: {
  banner: '/*! &lt;%= pkg.title || pkg.name %&gt; - v&lt;%= pkg.version %&gt; - ' +
    '&lt;%= grunt.template.today("yyyy-mm-dd") %&gt;\n' +
    '&lt;%= pkg.homepage ? "* " + pkg.homepage + "\n" : "" %&gt;' +
    '* Copyright (c) &lt;%= grunt.template.today("yyyy") %&gt; &lt;%= pkg.author.name %&gt;;' +
    ' Licensed &lt;%= _.pluck(pkg.licenses, "type").join(", ") %&gt; */'
},
// Defines a custom config property.
// This property '&lt;%= build.dest %&gt;'
build: {
  dest: 'dist'
},
// lint task
// Defines witch files to lint
lint: {
  files: ['grunt.js', 'js/gallery/**/*.js', 'tests/js/**/*.js']
},
// qunit multi-task
// Defines 2 different targets
// (dev, dist) for running qunit.
// Each target defines a list of test files
qunit: {
  dev: ['tests/index.html'],
  dist: ['&lt;%= build.dest %&gt;/tests/index.html']
},
// concat multi-task
// Defines 3 different targets 
// (libs, tests, dist) for concatenation.
// Each target defines a list of files to concatenate
// and a destination file to write the output
concat: { 
  libs: {
    src: [ "js/libs/json2.js", "js/libs/jquery-1.8.2.min.js", "js/libs/mustache-0.7.js", "js/libs/underscore-1.4.1.min.js", "js/libs/backbone-0.9.2.min.js" ],
    dest: '&lt;%= build.dest %&gt;/js/libs/&lt;%= pkg.name %&gt;-libs.&lt;%= pkg.version %&gt;.js'
  },
  tests: {
    src: [
      '&lt;banner:meta.banner&gt;', 'js/gallery/config.js', 'js/gallery/models/gallery.js', 'js/gallery/views/header.js', 'js/gallery/views/main-image.js', 'js/gallery/views/thumbnails.js', 'js/gallery/views/gallery.js' ],
    dest: '&lt;%= build.dest %&gt;/tests/js/&lt;%= pkg.name %&gt;-tests.&lt;%= pkg.version %&gt;.js'
  },
  dist: {
    src: [
      '&lt;banner:meta.banner&gt;', 'js/gallery/config.js', 'js/gallery/models/gallery.js', 'js/gallery/views/header.js', 'js/gallery/views/main-image.js', 'js/gallery/views/thumbnails.js', 'js/gallery/views/gallery.js', 'js/gallery/app.js' ],
    dest: '&lt;%= build.dest %&gt;/js/&lt;%= pkg.name %&gt;-app.&lt;%= pkg.version %&gt;.js'
  }
},
// min multi-task
// Defines 3 different targets 
// (libs, tests, dist) for minification.
// Each target defines a list of files to minify
// and a destination file to write the output
min: {
  libs: {
    src: ['&lt;config:concat.libs.dest&gt;'],
    dest: '&lt;%= build.dest %&gt;/js/libs/&lt;%= pkg.name %&gt;-libs.&lt;%= pkg.version %&gt;.min.js'
  },
  tests: {
    src: ['&lt;banner:meta.banner&gt;', '&lt;config:concat.tests.dest&gt;'],
    dest: '&lt;%= build.dest %&gt;/tests/js/&lt;%= pkg.name %&gt;-tests.&lt;%= pkg.version %&gt;.min.js'
  },
  dist: {
    src: ['&lt;banner:meta.banner&gt;', '&lt;config:concat.dist.dest&gt;'],
    dest: '&lt;%= build.dest %&gt;/js/&lt;%= pkg.name %&gt;-app.&lt;%= pkg.version %&gt;.min.js'
  }
},
// targethtml multi-task
// Defines 2 different targets (release, tests) 
// Each target defines a source file to process
// and a destination file to write the output
targethtml: {
  release: {
    src: 'index.html',
    dest: '&lt;%= build.dest %&gt;/index.html'
  },
  tests: {
    src: 'tests/index.html',
    dest: '&lt;%= build.dest %&gt;/tests/index.html'
  }
},
// copy multi-task
// Defines 1 single target (dist) 
// copy files from development path 
// to 'build.dest' folder
copy: {
  dist: {
    files: {
      "&lt;%= build.dest %&gt;/css/": "css/**",
      "&lt;%= build.dest %&gt;/img/gallery/": "img/gallery/**",
      "&lt;%= build.dest %&gt;/js/libs/bootstrap/": "js/libs/bootstrap/**",
      "&lt;%= build.dest %&gt;/tests/": ["tests/js/**", "tests/libs/**"],
      "&lt;%= build.dest %&gt;/gallery_data.json": "gallery_data.json"
    }
  }
},
// clean task
// remove every file from the defined folders
clean: ["&lt;%= build.dest %&gt;"],

// watch task
// runs the defined tasks every time a watched file is updated
watch: {
  files: '&lt;config:lint.files&gt;',
  tasks: 'lint qunit:dev'
},
// ...
</code></pre>

<p>  });</p>

<p>  // Load external tasks (grunt plugins)
  grunt.loadNpmTasks(&lsquo;grunt-contrib-clean&rsquo;);
  grunt.loadNpmTasks(&lsquo;grunt-contrib-copy&rsquo;);
  grunt.loadNpmTasks(&lsquo;grunt-targethtml&rsquo;);</p>

<p>  // Register custom tasks (alias tasks)
  grunt.registerTask(&lsquo;build&rsquo;, &lsquo;concat min targethtml copy&rsquo;);
  grunt.registerTask(&lsquo;clean-build&rsquo;, &lsquo;clean concat min targethtml copy&rsquo;);
  // Default task.
  grunt.registerTask(&lsquo;default&rsquo;, &lsquo;lint qunit:dev build qunit:dist&rsquo;);
};
```</p>

<p>Each task can be run independently by typing <code>grunt taskName</code> in a terminal.
Additionally, you can run a specific target on every multi-task by typing <code>grunt multiTaskName:targetName</code>.
The <code>registerTask</code> API allows us to define aliases to run a few tasks with a single command.</p>

<p>``` bash</p>

<h1>run lint task</h1>

<blockquote><p>grunt lint</p></blockquote>

<h1>run concat and minify tasks</h1>

<blockquote><p>grunt concat min</p></blockquote>

<h1>run only dev target of qunit task</h1>

<blockquote><p>grunt qunit:dev</p></blockquote>

<h1>run &ldquo;build&rdquo; alias (ie: &lsquo;grunt concat min targethtml copy&rsquo;)</h1>

<blockquote><p>grunt build</p></blockquote>

<h1>run default task (ie: &lsquo;grunt lint qunit:dev build qunit:dist&rsquo;)</h1>

<blockquote><p>grunt
```</p></blockquote>

<h2>So what&rsquo;s next?</h2>

<p>I hope you already see the kind of benefits you can get by adding Grunt to your web-application projects.</p>

<p>I also encourage you to take a look at the plugin system, which will allow you to create your own tasks.
The well made <code>gruntplugin</code> init task (<code>grunt init:gruntplugin</code>) will bootstrap everything you need to start your own task and publish it in minutes.
If you find yourself stucked at some point, the <a href="https://github.com/gruntjs/grunt/blob/master/docs/api.md" title="Grunt API">Grunt API documentation</a> is a very good reference.
You can also check the source code of one of the official plugins on github.</p>

<p>As I wrote at the beginning of this post, using Grunt to automate some tasks in your web-application projects is probably the first thing you&rsquo;re going to try.
But I&rsquo;m convinced you can use it in many other ways.
If you need some more examples, I invite you to look at my own experiments with Grunt:</p>

<ul>
<li><a href="https://github.com/dharFr/static-templater" title="Static Templater">static-templater</a>: A grunt-based command line tool to render HMTL and PDF from JSON and HTML templates</li>
<li><a href="https://github.com/dharFr/grunt-wkhtmltopdf" title="grunt-wkhtmltopdf">grunt-wkhtmltopdf</a>: A simple Grunt multitask that uses wkhtmltopdf to convert HTML files to PDF.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt brings automation to the front-end side]]></title>
    <link href="http://www.dhar.fr/blog/2012/08/26/grunt-brings-automation-to-the-front-end-side/"/>
    <updated>2012-08-26T16:26:00+02:00</updated>
    <id>http://www.dhar.fr/blog/2012/08/26/grunt-brings-automation-to-the-front-end-side</id>
    <content type="html"><![CDATA[<p>Over the past few weeks, I realized that I added <a href="http://www.gruntjs.com" title="Grunt">grunt</a> in every little side project I worked on.
Thinking about it, I&rsquo;m not sure if I can even imagine to start a project without this tool.</p>

<p>You probably already heard about <strong>grunt</strong>, don&rsquo;t you? In case you don&rsquo;t (seriously?), it&rsquo;s been created by <a href="http://benalman.com/">Ben Alman (aka. cowboy)</a>.
I guess the best description is the one from the official home page:</p>

<blockquote><p>Grunt is a task-based command line build tool for JavaScript projects.</p></blockquote>

<p>OK, looks nice.
But what&rsquo;s new?
I already have tools to <em>lint</em> or <em>minify</em> my Javascript.
I already use <em>qunit</em> to unit test my code.
And so on&hellip; Why should I use <em>grunt</em> instead of all these tools?</p>

<p>Here is why:</p>

<ol>
<li>Because you probably don&rsquo;t really use all these tools.
I mean, for sure you know about them, and you already give them a try; but most people I worked with (including me) just don&rsquo;t use them on real projects, in their day to day work, because bringing the pieces together is not that easy.</li>
<li><em>Grunt</em> also uses the exact same tools you already know, or in the worst case, it can learn to use them.
It doesn&rsquo;t reinvent anything but allows you to organize your workflow in an uniform, yet flexible, way.</li>
</ol>


<h2>Do we need such a tool?</h2>

<p>As a front-end developer, automation wasn&rsquo;t really part of my workflow.
My first job was in some king of web agency were every desktop machine ran on Windows XP, and our main development tools were Dreamweaver MX (I guess I&rsquo;m getting old&hellip;) and Filezilla. <!-- more -->
At the time we would never have considered automation, unit testing or continuous integration.</p>

<p>Then I left that company and found a real engineer job.
But still, like many other developers, I relied on some kind of heavy IDE where every <em>low level</em> interaction with the OS tend to be hidden.
And I never really felt a need to dig into this.
Until recently, I was convinced <em>automation</em> was only a concern for back-end or system engineers.</p>

<h2>Everything you need is a terminal!</h2>

<p>On the other hand, a lot of <em>front-end</em> tools came up recently, especially since <em>Node.js</em> brought Javascript to the Terminal but not only.
<strong>Uglify-js</strong>, <strong>JSLint</strong>, <strong>Qunit</strong>, <strong>Jasmine</strong>, <strong>CoffeeScript</strong>, <strong>SASS</strong>, <strong>LESS</strong> are only the most famous but there are many others.
These tools are changing our approach to front-end technologies, they make us more productive, adding value to our jobs.</p>

<p>But those tools remains <em>command line tools</em>.
Even if each one of them is pretty simple to setup and use, combining all of these to make something adapted to a particular project can quickly become a nightmare for someone who&rsquo;s not familiar with his Terminal.
From my experience, a lot of front-end developers, especially younger ones, are not familiar with Bash scripting (<em>and sometimes are afraid of it</em>). For sure, that&rsquo;s probably a bad approach, but that&rsquo;s how I felt not that long ago and I&rsquo;m pretty sure I&rsquo;m not the only one in that case.</p>

<p>Grails developers write their scripts in Groovy.
Rails developers have Rake files.
<strong>We know how to write Javascript!</strong> That&rsquo;s where we are comfortable and productive.
We don&rsquo;t want to get a headache by writing some messy <em>bash</em> script <sup>[<a href="#note1">1</a>]</sup>.</p>

<h2>Here comes grunt</h2>

<p>That&rsquo;s what <em>grunt</em> does. It allows you to define a bunch of tasks, in a <strong>consistent way</strong>, by writing Javascript.
<em>Consistent</em> is an important word here because you could probably achieve the same goal directly with <em>Node.js</em> but <em>grunt</em> gives you a simple way to write and organize your tasks.
The most common ones (<em>lint</em>, <em>concat</em>, <em>minify</em>, <em>test</em>, etc.) are already included <a href="https://github.com/cowboy/grunt#built-in-tasks" title="grunt built-in Tasks">in the package</a> so you don&rsquo;t have to think about how to deal with them.</p>

<p>It also came with a really simple <a href="https://github.com/cowboy/grunt/blob/master/docs/getting_started.md#loading-grunt-plugins-or-tasks-folders" title="Loading grunt plugins or tasks folders">plugin system</a> based on <a href="https://npmjs.org" title="Node Packaged Modules">npm</a>.
If you find yourself needing to do something not included as a build-in task, try to search <em>npm</em> to see if somebody else has not already released a plugin that fits your needs.
Otherwise, you can still write your own plugin and publish it to <em>npm</em>.
The <a href="https://github.com/cowboy/grunt/blob/master/docs/api.md" title="The grunt API">grunt API</a> allows you to do pretty much everything you could need.
And thanks to the built-in project scaffolding, it only takes a few minutes to change your spaghetti code into a well written plugin. Once here, publishing to npm is just a command line away so do not hesitate.</p>

<h2>What&rsquo;s next?</h2>

<p>I hope you will give a try to <em>grunt</em>. Even more because something called <a href="http://yeoman.io/">Yeoman</a> is getting close to the public release. I asked for a beta invite on twitter but for now, I didn&rsquo;t have a chance to try it yet.
It seems that it can do many more and as it&rsquo;s based on <em>grunt</em>, among many others, it&rsquo;s probably a good idea to get familiar with that one as soon as possible.</p>

<p><a id="note1"></a>
<small>[1]: I actually did a lot of bash scripting recently and, believe it or not, I liked it. I wouldn&rsquo;t have said that a few years ago. It&rsquo;s a powerful programming tool and every developer should be comfortable with it. You&rsquo;re not? Learn some basics. ;)</small></p>
]]></content>
  </entry>
  
</feed>
